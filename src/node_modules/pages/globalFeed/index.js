import React, {Fragment, useEffect} from 'react'
import Feed from 'components/feed'
import useFetch from 'hooks/useFetch'
import Pagination from 'components/pagination'
import {LIMIT, getPageQueryForApi} from 'utils'
import {stringify} from 'query-string'
import ErrorMessage from 'components/errormessage'
import Loading from 'components/loading'
import PopularTags from 'components/populartags'

const GlobalFeed = ({location, match}) => {
    const limit = LIMIT
    const {currentPage, offset} = getPageQueryForApi(location.search)
    const stringifiedUrl = stringify({
        limit,
        offset
    })
    const apiUrl = `/articles?${stringifiedUrl}`
    const [{response, error, isLoading}, doFetch] = useFetch(apiUrl)
    const paginationUrl = match.url
    useEffect(() => {
        doFetch()
    }, [doFetch, currentPage])

    return (
        <div>
            <div className="main-banner">
                <div className="main-banner-content">
                    <h2><span>M</span>edium</h2>
                    <span className="main-banner-tagline">Express your thoughts!</span>
                </div>
            </div>
            <div className="global-container">
                 <div>
                    {
                        isLoading && !response && 
                            <Loading />
                    }
                    {
                        error && 
                            <ErrorMessage />
                    }
                    {    
                        !isLoading && response && (
                            <Fragment>
                                <Feed articles={response.articles} />
                                <Pagination total={response.articlesCount} limit={limit} currentPage={currentPage} url={paginationUrl} />
                            </Fragment>
                        )
                    }
                 </div>
                 <div>
                    <PopularTags />
                 </div>
            </div>
        </div>
        
    )
}

export default GlobalFeed
