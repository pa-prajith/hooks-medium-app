import React, { Fragment, useState, useEffect, useContext } from 'react'
import {Redirect} from 'react-router-dom'
import ArticleForm from 'components/articleform'
import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'contexts/currentUser'

const EditArticle = ({match}) => {
    const slug = match.params.slug
    const apiUrl = `/articles/${slug}`
    const [{ response: articleEditResponse, error: articleEditError }, doFetchEditArticle] = useFetch(apiUrl)
    const [{ response: articleFetchResponse }, doFetchArticle] = useFetch(apiUrl)
    const [isSuccess, setIsSuccess] = useState(false)
    const [userState, dispatch] = useContext(CurrentUserContext)
    const [initialValues, setInitialValues] = useState(null)

    const onSubmitHandler = article =>{
        doFetchEditArticle({
            method: 'put',
            data: {
                article
            }
        })
    }

    useEffect(() => {
        if(!articleEditResponse) {
            return false
        }
        setIsSuccess(true)
    }, [articleEditResponse])

    useEffect(() => {
        doFetchArticle()
    }, [])

    useEffect(() => {
        if(!articleFetchResponse) {
            return false
        }
        setInitialValues({
            title: articleFetchResponse.article.title,
            description: articleFetchResponse.article.description,
            body: articleFetchResponse.article.body,
            taglist:articleFetchResponse.article.tagList
        })
    }, [articleFetchResponse])

    if(!userState || !initialValues) {
       return false;
    }

    if(isSuccess || userState.isLoggedIn === false) {
        return <Redirect to={apiUrl} />
    }

    return (
        <Fragment>
            <ArticleForm initialValues={initialValues} onSubmitHandler={onSubmitHandler} errors={(articleEditError && articleEditError.errors) || []} />
        </Fragment>
    )
}

export default EditArticle
