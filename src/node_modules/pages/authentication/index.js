import React, {useState, useEffect, useContext} from 'react'
import { Link, Redirect } from 'react-router-dom'
import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {CurrentUserContext} from 'contexts/currentUser'
import ValidationMessage from 'components/validationerror'

const Authentication = props => {
    const isLoginPage = props.match.path === '/login'
    const pageTitle = isLoginPage ? 'Sign In' : 'Sign Up'
    const goLink = isLoginPage ? '/register' : '/login'
    const goLinkText = isLoginPage? 'Need a new account?' : 'Have an account?'
    const apiUrl = isLoginPage ? '/users/login' : '/users'
    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [username, setUsername] = useState('')
    const [ { isLoading, response, error }, doFetch ] = useFetch(apiUrl)
    const [token, setToken] = useLocalStorage('token')
    const [isSucess, setIsSucess] = useState(false)
    const [state, setCurrentUserState] = useContext(CurrentUserContext)

    const submitHandler = e => {
        e.preventDefault()
        const user = isLoginPage? {email, password} : {email, password, username}
        doFetch({
            method: 'post',
            data: {
                user
            }
        })
    }

    useEffect(() => {
        if(!response) {
            return false
        }
        setToken(response.user.token)
        setCurrentUserState(state => ({
            ...state,
            isLoading: false,
            isLoggedIn: true,
            currentUser: response.user
        }))
        setIsSucess(true)
    }, [response])

    if(isSucess) {
        return <Redirect to="/" />
    }

    return (
        <div className="auth-page-content">
            <form onSubmit={submitHandler}>
                <ul className="auth-container">
                    <li className="center"><h2>{pageTitle}</h2></li>
                    <li className="center"><Link to={goLink}>{goLinkText}</Link></li>
                    {error && <li>
                        <ValidationMessage errorMessages={error.errors} />
                    </li>}
                    {!isLoginPage && (<li><input className="w-100" type="text" placeholder="Username" name="username" id="username" value={username} onChange={ e => setUsername(e.target.value) }/></li>)}
                    <li><input className="w-100" type="email" placeholder="Email" name="email" id="email" value={email} onChange={ e => setEmail(e.target.value) }/></li>
                    <li><input className="w-100" type="password" placeholder="Password" name="password" id="password" value={password} onChange={ e => setPassword(e.target.value) } /></li>
                    <li className="center"><button disabled={isLoading} type="submit">{pageTitle}</button></li>
                </ul>
            </form>
        </div>
    )
}

export default Authentication
